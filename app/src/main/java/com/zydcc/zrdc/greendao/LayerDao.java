package com.zydcc.zrdc.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zydcc.zrdc.model.bean.Layer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LAYER".
*/
public class LayerDao extends AbstractDao<Layer, Long> {

    public static final String TABLENAME = "LAYER";

    /**
     * Properties of entity Layer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FillColor = new Property(1, String.class, "fillColor", false, "FILL_COLOR");
        public final static Property IsBaseMap = new Property(2, int.class, "isBaseMap", false, "IS_BASE_MAP");
        public final static Property IsEdit = new Property(3, int.class, "isEdit", false, "IS_EDIT");
        public final static Property IsLabel = new Property(4, int.class, "isLabel", false, "IS_LABEL");
        public final static Property IsSelect = new Property(5, int.class, "isSelect", false, "IS_SELECT");
        public final static Property IsShow = new Property(6, int.class, "isShow", false, "IS_SHOW");
        public final static Property LabelColor = new Property(7, String.class, "labelColor", false, "LABEL_COLOR");
        public final static Property LabelField = new Property(8, String.class, "labelField", false, "LABEL_FIELD");
        public final static Property LayerId = new Property(9, Long.class, "layerId", false, "LAYER_ID");
        public final static Property LayerIndex = new Property(10, int.class, "layerIndex", false, "LAYER_INDEX");
        public final static Property LayerName = new Property(11, String.class, "layerName", false, "LAYER_NAME");
        public final static Property LayerStatus = new Property(12, String.class, "layerStatus", false, "LAYER_STATUS");
        public final static Property LayerType = new Property(13, String.class, "layerType", false, "LAYER_TYPE");
        public final static Property LayerUrl = new Property(14, String.class, "layerUrl", false, "LAYER_URL");
        public final static Property LineColor = new Property(15, String.class, "lineColor", false, "LINE_COLOR");
        public final static Property ProjectId = new Property(16, Long.class, "projectId", false, "PROJECT_ID");
    }


    public LayerDao(DaoConfig config) {
        super(config);
    }
    
    public LayerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LAYER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FILL_COLOR\" TEXT," + // 1: fillColor
                "\"IS_BASE_MAP\" INTEGER NOT NULL ," + // 2: isBaseMap
                "\"IS_EDIT\" INTEGER NOT NULL ," + // 3: isEdit
                "\"IS_LABEL\" INTEGER NOT NULL ," + // 4: isLabel
                "\"IS_SELECT\" INTEGER NOT NULL ," + // 5: isSelect
                "\"IS_SHOW\" INTEGER NOT NULL ," + // 6: isShow
                "\"LABEL_COLOR\" TEXT," + // 7: labelColor
                "\"LABEL_FIELD\" TEXT," + // 8: labelField
                "\"LAYER_ID\" INTEGER," + // 9: layerId
                "\"LAYER_INDEX\" INTEGER NOT NULL ," + // 10: layerIndex
                "\"LAYER_NAME\" TEXT," + // 11: layerName
                "\"LAYER_STATUS\" TEXT," + // 12: layerStatus
                "\"LAYER_TYPE\" TEXT," + // 13: layerType
                "\"LAYER_URL\" TEXT," + // 14: layerUrl
                "\"LINE_COLOR\" TEXT," + // 15: lineColor
                "\"PROJECT_ID\" INTEGER);"); // 16: projectId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LAYER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Layer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fillColor = entity.getFillColor();
        if (fillColor != null) {
            stmt.bindString(2, fillColor);
        }
        stmt.bindLong(3, entity.getIsBaseMap());
        stmt.bindLong(4, entity.getIsEdit());
        stmt.bindLong(5, entity.getIsLabel());
        stmt.bindLong(6, entity.getIsSelect());
        stmt.bindLong(7, entity.getIsShow());
 
        String labelColor = entity.getLabelColor();
        if (labelColor != null) {
            stmt.bindString(8, labelColor);
        }
 
        String labelField = entity.getLabelField();
        if (labelField != null) {
            stmt.bindString(9, labelField);
        }
 
        Long layerId = entity.getLayerId();
        if (layerId != null) {
            stmt.bindLong(10, layerId);
        }
        stmt.bindLong(11, entity.getLayerIndex());
 
        String layerName = entity.getLayerName();
        if (layerName != null) {
            stmt.bindString(12, layerName);
        }
 
        String layerStatus = entity.getLayerStatus();
        if (layerStatus != null) {
            stmt.bindString(13, layerStatus);
        }
 
        String layerType = entity.getLayerType();
        if (layerType != null) {
            stmt.bindString(14, layerType);
        }
 
        String layerUrl = entity.getLayerUrl();
        if (layerUrl != null) {
            stmt.bindString(15, layerUrl);
        }
 
        String lineColor = entity.getLineColor();
        if (lineColor != null) {
            stmt.bindString(16, lineColor);
        }
 
        Long projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindLong(17, projectId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Layer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fillColor = entity.getFillColor();
        if (fillColor != null) {
            stmt.bindString(2, fillColor);
        }
        stmt.bindLong(3, entity.getIsBaseMap());
        stmt.bindLong(4, entity.getIsEdit());
        stmt.bindLong(5, entity.getIsLabel());
        stmt.bindLong(6, entity.getIsSelect());
        stmt.bindLong(7, entity.getIsShow());
 
        String labelColor = entity.getLabelColor();
        if (labelColor != null) {
            stmt.bindString(8, labelColor);
        }
 
        String labelField = entity.getLabelField();
        if (labelField != null) {
            stmt.bindString(9, labelField);
        }
 
        Long layerId = entity.getLayerId();
        if (layerId != null) {
            stmt.bindLong(10, layerId);
        }
        stmt.bindLong(11, entity.getLayerIndex());
 
        String layerName = entity.getLayerName();
        if (layerName != null) {
            stmt.bindString(12, layerName);
        }
 
        String layerStatus = entity.getLayerStatus();
        if (layerStatus != null) {
            stmt.bindString(13, layerStatus);
        }
 
        String layerType = entity.getLayerType();
        if (layerType != null) {
            stmt.bindString(14, layerType);
        }
 
        String layerUrl = entity.getLayerUrl();
        if (layerUrl != null) {
            stmt.bindString(15, layerUrl);
        }
 
        String lineColor = entity.getLineColor();
        if (lineColor != null) {
            stmt.bindString(16, lineColor);
        }
 
        Long projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindLong(17, projectId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Layer readEntity(Cursor cursor, int offset) {
        Layer entity = new Layer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fillColor
            cursor.getInt(offset + 2), // isBaseMap
            cursor.getInt(offset + 3), // isEdit
            cursor.getInt(offset + 4), // isLabel
            cursor.getInt(offset + 5), // isSelect
            cursor.getInt(offset + 6), // isShow
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // labelColor
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // labelField
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // layerId
            cursor.getInt(offset + 10), // layerIndex
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // layerName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // layerStatus
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // layerType
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // layerUrl
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // lineColor
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16) // projectId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Layer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFillColor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsBaseMap(cursor.getInt(offset + 2));
        entity.setIsEdit(cursor.getInt(offset + 3));
        entity.setIsLabel(cursor.getInt(offset + 4));
        entity.setIsSelect(cursor.getInt(offset + 5));
        entity.setIsShow(cursor.getInt(offset + 6));
        entity.setLabelColor(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLabelField(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLayerId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setLayerIndex(cursor.getInt(offset + 10));
        entity.setLayerName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLayerStatus(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLayerType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLayerUrl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLineColor(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setProjectId(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Layer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Layer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Layer entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
