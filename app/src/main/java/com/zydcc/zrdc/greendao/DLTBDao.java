package com.zydcc.zrdc.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zydcc.zrdc.model.dic.DLTB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DLTB".
*/
public class DLTBDao extends AbstractDao<DLTB, String> {

    public static final String TABLENAME = "DLTB";

    /**
     * Properties of entity DLTB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Bz = new Property(1, String.class, "bz", false, "BZ");
        public final static Property Sfxs = new Property(2, int.class, "sfxs", false, "SFXS");
        public final static Property Xh = new Property(3, int.class, "xh", false, "XH");
        public final static Property Xsws = new Property(4, String.class, "xsws", false, "XSWS");
        public final static Property Ystj = new Property(5, int.class, "ystj", false, "YSTJ");
        public final static Property Zddm = new Property(6, String.class, "zddm", false, "ZDDM");
        public final static Property Zdlx = new Property(7, String.class, "zdlx", false, "ZDLX");
        public final static Property Zdmc = new Property(8, String.class, "zdmc", false, "ZDMC");
    }


    public DLTBDao(DaoConfig config) {
        super(config);
    }
    
    public DLTBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DLTB entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String bz = entity.getBz();
        if (bz != null) {
            stmt.bindString(2, bz);
        }
        stmt.bindLong(3, entity.getSfxs());
        stmt.bindLong(4, entity.getXh());
 
        String xsws = entity.getXsws();
        if (xsws != null) {
            stmt.bindString(5, xsws);
        }
        stmt.bindLong(6, entity.getYstj());
 
        String zddm = entity.getZddm();
        if (zddm != null) {
            stmt.bindString(7, zddm);
        }
 
        String zdlx = entity.getZdlx();
        if (zdlx != null) {
            stmt.bindString(8, zdlx);
        }
 
        String zdmc = entity.getZdmc();
        if (zdmc != null) {
            stmt.bindString(9, zdmc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DLTB entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String bz = entity.getBz();
        if (bz != null) {
            stmt.bindString(2, bz);
        }
        stmt.bindLong(3, entity.getSfxs());
        stmt.bindLong(4, entity.getXh());
 
        String xsws = entity.getXsws();
        if (xsws != null) {
            stmt.bindString(5, xsws);
        }
        stmt.bindLong(6, entity.getYstj());
 
        String zddm = entity.getZddm();
        if (zddm != null) {
            stmt.bindString(7, zddm);
        }
 
        String zdlx = entity.getZdlx();
        if (zdlx != null) {
            stmt.bindString(8, zdlx);
        }
 
        String zdmc = entity.getZdmc();
        if (zdmc != null) {
            stmt.bindString(9, zdmc);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DLTB readEntity(Cursor cursor, int offset) {
        DLTB entity = new DLTB( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bz
            cursor.getInt(offset + 2), // sfxs
            cursor.getInt(offset + 3), // xh
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // xsws
            cursor.getInt(offset + 5), // ystj
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // zddm
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // zdlx
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // zdmc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DLTB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBz(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSfxs(cursor.getInt(offset + 2));
        entity.setXh(cursor.getInt(offset + 3));
        entity.setXsws(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setYstj(cursor.getInt(offset + 5));
        entity.setZddm(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setZdlx(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setZdmc(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DLTB entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(DLTB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DLTB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
