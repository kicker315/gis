package com.zydcc.zrdc.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zydcc.zrdc.model.bean.Project;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROJECT".
*/
public class ProjectDao extends AbstractDao<Project, Long> {

    public static final String TABLENAME = "PROJECT";

    /**
     * Properties of entity Project.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ProjectId = new Property(0, Long.class, "projectId", true, "_id");
        public final static Property ProjectName = new Property(1, String.class, "projectName", false, "PROJECT_NAME");
        public final static Property ProjectMan = new Property(2, String.class, "projectMan", false, "PROJECT_MAN");
        public final static Property ProjectProgress = new Property(3, String.class, "projectProgress", false, "PROJECT_PROGRESS");
        public final static Property StartTime = new Property(4, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property LastEditTime = new Property(5, java.util.Date.class, "lastEditTime", false, "LAST_EDIT_TIME");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
        public final static Property FeatureNum = new Property(7, int.class, "featureNum", false, "FEATURE_NUM");
        public final static Property DoneFeatureNum = new Property(8, int.class, "doneFeatureNum", false, "DONE_FEATURE_NUM");
        public final static Property Coordinate = new Property(9, String.class, "coordinate", false, "COORDINATE");
    }


    public ProjectDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: projectId
                "\"PROJECT_NAME\" TEXT," + // 1: projectName
                "\"PROJECT_MAN\" TEXT," + // 2: projectMan
                "\"PROJECT_PROGRESS\" TEXT," + // 3: projectProgress
                "\"START_TIME\" INTEGER," + // 4: startTime
                "\"LAST_EDIT_TIME\" INTEGER," + // 5: lastEditTime
                "\"URL\" TEXT," + // 6: url
                "\"FEATURE_NUM\" INTEGER NOT NULL ," + // 7: featureNum
                "\"DONE_FEATURE_NUM\" INTEGER NOT NULL ," + // 8: doneFeatureNum
                "\"COORDINATE\" TEXT);"); // 9: coordinate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Project entity) {
        stmt.clearBindings();
 
        Long projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindLong(1, projectId);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(2, projectName);
        }
 
        String projectMan = entity.getProjectMan();
        if (projectMan != null) {
            stmt.bindString(3, projectMan);
        }
 
        String projectProgress = entity.getProjectProgress();
        if (projectProgress != null) {
            stmt.bindString(4, projectProgress);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(5, startTime.getTime());
        }
 
        java.util.Date lastEditTime = entity.getLastEditTime();
        if (lastEditTime != null) {
            stmt.bindLong(6, lastEditTime.getTime());
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
        stmt.bindLong(8, entity.getFeatureNum());
        stmt.bindLong(9, entity.getDoneFeatureNum());
 
        String coordinate = entity.getCoordinate();
        if (coordinate != null) {
            stmt.bindString(10, coordinate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Project entity) {
        stmt.clearBindings();
 
        Long projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindLong(1, projectId);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(2, projectName);
        }
 
        String projectMan = entity.getProjectMan();
        if (projectMan != null) {
            stmt.bindString(3, projectMan);
        }
 
        String projectProgress = entity.getProjectProgress();
        if (projectProgress != null) {
            stmt.bindString(4, projectProgress);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(5, startTime.getTime());
        }
 
        java.util.Date lastEditTime = entity.getLastEditTime();
        if (lastEditTime != null) {
            stmt.bindLong(6, lastEditTime.getTime());
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
        stmt.bindLong(8, entity.getFeatureNum());
        stmt.bindLong(9, entity.getDoneFeatureNum());
 
        String coordinate = entity.getCoordinate();
        if (coordinate != null) {
            stmt.bindString(10, coordinate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Project readEntity(Cursor cursor, int offset) {
        Project entity = new Project( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // projectId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // projectName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // projectMan
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // projectProgress
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // startTime
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // lastEditTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // url
            cursor.getInt(offset + 7), // featureNum
            cursor.getInt(offset + 8), // doneFeatureNum
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // coordinate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Project entity, int offset) {
        entity.setProjectId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProjectName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProjectMan(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProjectProgress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStartTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setLastEditTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFeatureNum(cursor.getInt(offset + 7));
        entity.setDoneFeatureNum(cursor.getInt(offset + 8));
        entity.setCoordinate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Project entity, long rowId) {
        entity.setProjectId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Project entity) {
        if(entity != null) {
            return entity.getProjectId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Project entity) {
        return entity.getProjectId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
