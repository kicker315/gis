package com.zydcc.zrdc.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zydcc.zrdc.model.bean.ProjectFile;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROJECT_FILE".
*/
public class ProjectFileDao extends AbstractDao<ProjectFile, Long> {

    public static final String TABLENAME = "PROJECT_FILE";

    /**
     * Properties of entity ProjectFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProjectId = new Property(1, Long.class, "projectId", false, "PROJECT_ID");
        public final static Property FeatureId = new Property(2, String.class, "featureId", false, "FEATURE_ID");
        public final static Property FileName = new Property(3, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileURL = new Property(4, String.class, "fileURL", false, "FILE_URL");
        public final static Property FileType = new Property(5, int.class, "fileType", false, "FILE_TYPE");
        public final static Property CreateTime = new Property(6, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property Lon = new Property(7, float.class, "lon", false, "LON");
        public final static Property Lat = new Property(8, float.class, "lat", false, "LAT");
        public final static Property Xzb = new Property(9, float.class, "xzb", false, "XZB");
        public final static Property Yzb = new Property(10, float.class, "yzb", false, "YZB");
        public final static Property Fwj = new Property(11, float.class, "fwj", false, "FWJ");
        public final static Property TimeLength = new Property(12, long.class, "timeLength", false, "TIME_LENGTH");
    }


    public ProjectFileDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECT_FILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PROJECT_ID\" INTEGER," + // 1: projectId
                "\"FEATURE_ID\" TEXT," + // 2: featureId
                "\"FILE_NAME\" TEXT," + // 3: fileName
                "\"FILE_URL\" TEXT," + // 4: fileURL
                "\"FILE_TYPE\" INTEGER NOT NULL ," + // 5: fileType
                "\"CREATE_TIME\" INTEGER," + // 6: createTime
                "\"LON\" REAL NOT NULL ," + // 7: lon
                "\"LAT\" REAL NOT NULL ," + // 8: lat
                "\"XZB\" REAL NOT NULL ," + // 9: xzb
                "\"YZB\" REAL NOT NULL ," + // 10: yzb
                "\"FWJ\" REAL NOT NULL ," + // 11: fwj
                "\"TIME_LENGTH\" INTEGER NOT NULL );"); // 12: timeLength
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECT_FILE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProjectFile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindLong(2, projectId);
        }
 
        String featureId = entity.getFeatureId();
        if (featureId != null) {
            stmt.bindString(3, featureId);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
 
        String fileURL = entity.getFileURL();
        if (fileURL != null) {
            stmt.bindString(5, fileURL);
        }
        stmt.bindLong(6, entity.getFileType());
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(7, createTime.getTime());
        }
        stmt.bindDouble(8, entity.getLon());
        stmt.bindDouble(9, entity.getLat());
        stmt.bindDouble(10, entity.getXzb());
        stmt.bindDouble(11, entity.getYzb());
        stmt.bindDouble(12, entity.getFwj());
        stmt.bindLong(13, entity.getTimeLength());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProjectFile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindLong(2, projectId);
        }
 
        String featureId = entity.getFeatureId();
        if (featureId != null) {
            stmt.bindString(3, featureId);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
 
        String fileURL = entity.getFileURL();
        if (fileURL != null) {
            stmt.bindString(5, fileURL);
        }
        stmt.bindLong(6, entity.getFileType());
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(7, createTime.getTime());
        }
        stmt.bindDouble(8, entity.getLon());
        stmt.bindDouble(9, entity.getLat());
        stmt.bindDouble(10, entity.getXzb());
        stmt.bindDouble(11, entity.getYzb());
        stmt.bindDouble(12, entity.getFwj());
        stmt.bindLong(13, entity.getTimeLength());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProjectFile readEntity(Cursor cursor, int offset) {
        ProjectFile entity = new ProjectFile( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // projectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // featureId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fileURL
            cursor.getInt(offset + 5), // fileType
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // createTime
            cursor.getFloat(offset + 7), // lon
            cursor.getFloat(offset + 8), // lat
            cursor.getFloat(offset + 9), // xzb
            cursor.getFloat(offset + 10), // yzb
            cursor.getFloat(offset + 11), // fwj
            cursor.getLong(offset + 12) // timeLength
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProjectFile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProjectId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFeatureId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileURL(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFileType(cursor.getInt(offset + 5));
        entity.setCreateTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setLon(cursor.getFloat(offset + 7));
        entity.setLat(cursor.getFloat(offset + 8));
        entity.setXzb(cursor.getFloat(offset + 9));
        entity.setYzb(cursor.getFloat(offset + 10));
        entity.setFwj(cursor.getFloat(offset + 11));
        entity.setTimeLength(cursor.getLong(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProjectFile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProjectFile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProjectFile entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
