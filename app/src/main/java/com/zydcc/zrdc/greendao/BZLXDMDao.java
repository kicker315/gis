package com.zydcc.zrdc.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zydcc.zrdc.model.dic.BZLXDM;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BZLXDM".
*/
public class BZLXDMDao extends AbstractDao<BZLXDM, Void> {

    public static final String TABLENAME = "BZLXDM";

    /**
     * Properties of entity BZLXDM.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DM = new Property(0, String.class, "DM", false, "DM");
        public final static Property ID = new Property(1, String.class, "ID", false, "ID");
        public final static Property MC = new Property(2, String.class, "MC", false, "MC");
    }


    public BZLXDMDao(DaoConfig config) {
        super(config);
    }
    
    public BZLXDMDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BZLXDM entity) {
        stmt.clearBindings();
 
        String DM = entity.getDM();
        if (DM != null) {
            stmt.bindString(1, DM);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(2, ID);
        }
 
        String MC = entity.getMC();
        if (MC != null) {
            stmt.bindString(3, MC);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BZLXDM entity) {
        stmt.clearBindings();
 
        String DM = entity.getDM();
        if (DM != null) {
            stmt.bindString(1, DM);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(2, ID);
        }
 
        String MC = entity.getMC();
        if (MC != null) {
            stmt.bindString(3, MC);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BZLXDM readEntity(Cursor cursor, int offset) {
        BZLXDM entity = new BZLXDM( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // DM
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // MC
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BZLXDM entity, int offset) {
        entity.setDM(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMC(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BZLXDM entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BZLXDM entity) {
        return null;
    }

    @Override
    public boolean hasKey(BZLXDM entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
